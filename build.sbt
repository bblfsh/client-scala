name := "bblfsh-client"
organization := "org.bblfsh"

git.useGitDescribe := true
enablePlugins(GitVersioning)
scalaVersion := "2.11.11"

mainClass in Compile := Some("org.bblfsh.client.cli.ScalaClientCLI")
mainClass := mainClass in Compile
target in assembly := file("build")

// Where the .h files will be generated by javah from the sbt-jni plugin
target in javah := file("src/main/native")

libraryDependencies ++= Seq(
  "org.rogach" %% "scallop" % "3.0.3",
  "commons-io" % "commons-io" % "2.5",

  "com.thesamet.scalapb" %% "scalapb-runtime" % scalapb.compiler.Version.scalapbVersion % "protobuf",
  "com.thesamet.scalapb" %% "scalapb-runtime-grpc" % scalapb.compiler.Version.scalapbVersion,
  "io.grpc" % "grpc-netty" % scalapb.compiler.Version.grpcJavaVersion,

  "org.scalatest" %% "scalatest" % "3.0.1" % "test"
)

assemblyMergeStrategy in assembly := {
  case "META-INF/io.netty.versions.properties" =>
    MergeStrategy.last
  case "META-INF\\io.netty.versions.properties" =>
    MergeStrategy.last
  case x =>
    val oldStrategy = (assemblyMergeStrategy in assembly).value
    oldStrategy(x)
}

test in assembly := {}

PB.targets in Compile := Seq(
    scalapb.gen() -> (sourceManaged in Compile).value
)
PB.protoSources in Compile := Seq(file(protoDir))

sonatypeProfileName := "org.bblfsh"

// pom settings for sonatype
homepage := Some(url("https://github.com/bblfsh/scala-client"))
scmInfo := Some(ScmInfo(url("https://github.com/bblfsh/scala-client"),
                            "git@github.com:bblfsh/scala-client.git"))
developers += Developer("bzz",
                        "Alexander Bezzubov",
                        "alex@sourced.tech",
                        url("https://github.com/bzz"))
developers += Developer("ncordon",
                        "Nacho CordÃ³n",
                        "nacho@sourced.tech",
                        url("https://github.com/ncordon"))


licenses += ("Apache-2.0", url("http://www.apache.org/licenses/LICENSE-2.0"))
pomIncludeRepository := (_ => false)

crossPaths := false
publishMavenStyle := true
exportJars := true

val SONATYPE_USERNAME = scala.util.Properties.envOrElse("SONATYPE_USERNAME", "NOT_SET")
val SONATYPE_PASSWORD = scala.util.Properties.envOrElse("SONATYPE_PASSWORD", "NOT_SET")
val SONATYPE_PASSPHRASE = scala.util.Properties.envOrElse("SONATYPE_PASSPHRASE", "NOT_SET")
credentials += Credentials(
  "Sonatype Nexus Repository Manager",
  "oss.sonatype.org",
  SONATYPE_USERNAME,
  SONATYPE_PASSWORD)

useGpg := false
pgpSecretRing := baseDirectory.value / "project" / ".gnupg" / "secring.gpg"
pgpPublicRing := baseDirectory.value / "project" / ".gnupg" / "pubring.gpg"
pgpPassphrase := Some(SONATYPE_PASSPHRASE.toArray)

isSnapshot := version.value endsWith "SNAPSHOT"

publishTo := {
  val nexus = "https://oss.sonatype.org/"
  if (isSnapshot.value)
    Some("snapshots" at nexus + "content/repositories/snapshots")
  else
    Some("releases" at nexus + "service/local/staging/deploy/maven2")
}
